<application>
  <component name="AppStorage">
    <option name="pinNewTranslationDialog" value="true" />
    <histories>
      <item value="Daemon" />
      <item value="SONIFICATION" />
      <item value="CONTENT TYPE SONIFICATION" />
      <item value="SPEECH" />
      <item value="CONTENT TYPE SPEECH" />
      <item value="draw Rect.left" />
      <item value="get Audio Source" />
      <item value="Minor" />
      <item value="Major" />
      <item value="get Touch Major" />
      <item value="AXIS PRESSURE" />
      <item value="get Pressure" />
      <item value="for the first pointer index (may be an arbitrary pointer identifier)." />
      <item value="EMULATION" />
      <item value="Cornor" />
      <item value="end Update With Cornor" />
      <item value="threshold" />
      <item value="Gaussian Blur" />
      <item value="cvt Color" />
      <item value="hierarchy" />
      <item value="REVERSE DIFFERENCE" />
      <item value="XOR" />
      <item value="UNION" />
      <item value="INTERSECT" />
      <item value="DIFFERENCE" />
      <item value="The x-coordinate of the control point on a quadratic curve" />
      <item value="Permit" />
      <item value="The internal state associated with this pseudorandom number generator. (The specs for the methods in this class describe the ongoing computation of this value.)" />
      <item value="Finds out if there is any intersection between two rotated rectangles." />
      <item value="inds out if there is any intersection between two rotated rectangles." />
      <item value="Returns the correctly rounded positive square root of a {@code double} value." />
      <item value="Ellipse" />
      <item value="Accumulator threshold parameter. Only those lines are returned that get enough" />
      <item value="Angle resolution of the accumulator in radians." />
      <item value="RETR CCOMP" />
      <item value="The function computes a curve length or a closed contour perimeter." />
      <item value="cosfi" />
      <item value="Sets the left position of this view relative to its parent. This method is meant to be called by the layout system and should not generally be called otherwise, because the property may be changed at any time by the layout." />
      <item value="Determine if the supplied view is under the given point in the parent view's coordinate system. @param view Child view of the parent to hit test @param x X position to test in the parent's coordinate system @param y Y position to test in the parent's coordinate system @return true if the supplied view is under the given point, false otherwise" />
      <item value="ID of the pointer that is dragging the captured child view" />
      <item value="Capture a specific child view for dragging within the parent. The callback will be notified but {@link CallbacktryCaptureView(android.view.View, int)} will not be asked permission to capture this view. @param childView Child view to capture @param activePointerId ID of the pointer that is dragging the captured child view" />
      <item value="@return The minimum distance in pixels that the user must travel to initiate a drag" />
      <item value="Called to determine the Z-order of child views. @param index the ordered position to query for @return index of the view that should be ordered at position &lt;code&gt;index&lt;code&gt;" />
      <item value="Enable edge tracking for the selected edges of the parent view. The callback's {@link CallbackonEdgeTouched(int, int)} and {@link CallbackonEdgeDragStarted(int, int)} methods will only be invoked for edges for which edge tracking has been enabled." />
      <item value="A combination of edge flags describing the edge(s) locked" />
      <item value="Called when the given edge may become locked. This can happen if an edge drag was preliminarily rejected before beginning, but after {@link onEdgeTouched(int, int)} was called. This method should return true to lock this edge or false to leave it unlocked. The default behavior is to leave edges unlocked." />
      <item value="STATE IDLE" />
      <item value="STATE SETTLING" />
      <item value="The motion event that occurred during the context click." />
      <item value="Implement this method to handle generic motion events." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="151" />
        <entry key="ENGLISH" value="153" />
        <entry key="POLISH" value="1" />
        <entry key="MALTESE" value="1" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="JAPANESE" value="1" />
        <entry key="HINDI" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1671454477328" />
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20190520000299422" />
      </app-key>
    </option>
    <option name="googleTranslateSettings">
      <google-translate>
        <option name="primaryLanguage" value="ESPERANTO" />
      </google-translate>
    </option>
    <option name="translator" value="BAIDU" />
  </component>
  <component name="Translation.Cache">
    <option name="lastTrimTime" value="1721703512755" />
  </component>
  <component name="Translation.States">
    <histories>
      <item value="Resumed state for a LifecycleOwner. For an [android.app.Activity], this state is reached after [onResume][android.app.Activity.onResume] is called." />
      <item value="Compares if this State is greater or equal to the given `state`. @param state State to compare with @return true if this State is greater or equal to the given `state`" />
      <item value="launchWhenCreated is deprecated as it can lead to wasted resources &quot; + &quot;in some cases. Replace with suspending repeatOnLifecycle to run the block whenever &quot; + &quot;the Lifecycle state is at least Lifecycle.State.CREATED." />
      <item value="Indicates that the ViewPager2 is in the process of settling to a final position." />
      <item value="SCROLL STATE SETTLING" />
      <item value="Some device read data very slow with uri, but fast with file path. &lt;br&gt; Reference: &lt;a href='https:github.combumptechglideissues4174'&gt;https:github.combumptechglideissues4174&lt;a&gt; &lt;p&gt; When setting android:requestLegacyExternalStorage=&quot;true&quot;&lt;br&gt; and Build.VERSION.SDK_INT &lt;= Build.VERSION_CODES.Q, The app can read media with File API (like FileInputStream). &lt;p&gt; Note: When get an uri from file, use 'uri.getPath()' rather than 'uri.toString()' to File API." />
      <item value="[Key] for previous page if more data can be loaded in that direction, `null` otherwise." />
      <item value="otherwise" />
      <item value="[Key] for next page if more data can be loaded in that direction, `null` otherwise." />
      <item value="&lt;p&gt;This class and its iterator implement all of the &lt;em&gt;optional&lt;em&gt; methods of the {@link Collection} and {@link Iterator} interfaces. The Iterator provided in method {@link iterator()} is &lt;em&gt;not&lt;em&gt; guaranteed to traverse the elements of the PriorityBlockingQueue in any particular order. If you need ordered traversal, consider using {@code Arrays.sort(pq.toArray())}. Also, method {@code drainTo} can be used to &lt;em&gt;remove&lt;em&gt; some or all elements in priority order and place them in another collection." />
      <item value="A priority queue relying on {@linkplain Comparable natural ordering} also does not permit insertion of non-comparable objects (doing so results in {@code ClassCastException})." />
      <item value="This class does not permit {@code null} elements." />
      <item value="attempted additions may fail due to resource exhaustion (causing {@code OutOfMemoryError})." />
      <item value="While this queue is logically unbounded," />
      <item value="Compares this object with the specified object for order. Returns zero if this object is equal to the specified [other] object, a negative number if it's less than [other], or a positive number if it's greater than [other]." />
      <item value="WK REDPACKET" />
      <item value="Creates a [State] object whose [State.value] is the result of [calculation]. The result of calculation will be cached in such a way that calling [State.value] repeatedly will not cause [calculation] to be executed multiple times, but reading [State.value] will cause all [State] objects that got read during the [calculation] to be read in the current [Snapshot], meaning that this will correctly subscribe to the derived state objects if the value is being read in an observed context such as a [Composable] function. Derived states without mutation policy trigger updates on each dependency change. To avoid invalidation on update, provide suitable [SnapshotMutationPolicy] through [derivedStateOf] overload." />
      <item value="check box" />
      <item value="80 ff 000000" />
      <item value="user capaid" />
      <item value="certification number" />
      <item value="WK Sensitive Words Provider" />
      <item value="Regular" />
      <item value="experimental material 3 api" />
      <item value="Diagonal" />
      <item value="Subtracts the other value from this value" />
      <item value="coil" />
      <item value="Container" />
      <item value="profile" />
      <item value="profiler" />
      <item value="compaction strategy" />
      <item value="Protocol" />
      <item value="captcha" />
      <item value="consult the PlatformDispatcher directly" />
      <item value="Look up the current FlutterView from the context via View.of(context) or consult the PlatformDispatcher directly instead." />
      <item value="opaque" />
      <item value="Called whenever the widget configuration changes. If the parent widget rebuilds and requests that this location in the tree update to display a new widget with the same [runtimeType] and [Widget.key], the framework will update the [widget] property of this [State] object to refer to the new widget and then call this method with the previous widget as an argument. Override this method to respond when the [widget] changes (e.g., to start implicit animations). The framework always calls [build] after calling [didUpdateWidget], which means any calls to [setState] in [didUpdateWidget] are redundant. {@macro flutter.widgets.State.initState} Implementations of this method should start with a call to the inherited method, as in `super.didUpdateWidget(oldWidget)`. _See the discussion at [Element.rebuild] for more information on when this method is called._" />
      <item value="[MutableScatterMap] is a container with a [Map]-like interface based on a flat hash table implementation (the keyvalue mappings are not stored by nodes but directly into arrays). The underlying implementation is designed to avoid all allocations on insertion, removal, retrieval, and iteration. Allocations may still happen on insertion when the underlying storage needs to grow to accommodate newly added entries to the table. In addition, this implementation minimizes memory usage by avoiding the use of separate objects to hold keyvalue pairs." />
      <item value="Make this drawable mutable. This operation cannot be reversed. A mutable drawable is guaranteed to not share its state with any other drawable. This is especially useful when you need to modify properties of drawables loaded from resources. By default, all drawables instances loaded from the same resource share a common state; if you modify the state of one instance, all the other instances will receive the same modification. Calling this method on a mutable Drawable will have no effect. @return This drawable. @see ConstantState @see getConstantState()" />
      <item value="welfare center navigator" />
      <item value="URL UNION AGREEMENT" />
      <item value="URL COMMITMENT LETTER" />
      <item value="URL COOPERATION AGREEMENT" />
      <item value="Returns a new persistent list of the specified elements." />
      <item value="A generic persistent ordered collection of elements that supports adding and removing elements. Modification operations return new instances of the persistent list with the modification applied. @param E the type of elements contained in the list. The persistent list is covariant on its element type." />
      <item value="A generic immutable ordered collection of elements. Methods in this interface support only read-only access to the immutable list. Modification operations are supported through the [PersistentList] interface. Implementors of this interface take responsibility to be immutable. Once constructed they must contain the same elements in the same order. @param E the type of elements contained in the list. The immutable list is covariant on its element type." />
      <item value="persistent" />
      <item value="Returns an empty persistent list." />
      <item value="adjust" />
      <item value="User implemented custom auto migration spec. @return The auto migration specification or none if the user has not implemented a spec" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="222" />
        <entry key="ENGLISH" value="223" />
        <entry key="ITALIAN" value="2" />
        <entry key="LATIN" value="1" />
        <entry key="SCOTS_GAELIC" value="1" />
      </map>
    </option>
  </component>
</application>