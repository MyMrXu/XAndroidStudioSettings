<application>
  <component name="AppStorage">
    <option name="pinNewTranslationDialog" value="true" />
    <histories>
      <item value="Daemon" />
      <item value="SONIFICATION" />
      <item value="CONTENT TYPE SONIFICATION" />
      <item value="SPEECH" />
      <item value="CONTENT TYPE SPEECH" />
      <item value="draw Rect.left" />
      <item value="get Audio Source" />
      <item value="Minor" />
      <item value="Major" />
      <item value="get Touch Major" />
      <item value="AXIS PRESSURE" />
      <item value="get Pressure" />
      <item value="for the first pointer index (may be an arbitrary pointer identifier)." />
      <item value="EMULATION" />
      <item value="Cornor" />
      <item value="end Update With Cornor" />
      <item value="threshold" />
      <item value="Gaussian Blur" />
      <item value="cvt Color" />
      <item value="hierarchy" />
      <item value="REVERSE DIFFERENCE" />
      <item value="XOR" />
      <item value="UNION" />
      <item value="INTERSECT" />
      <item value="DIFFERENCE" />
      <item value="The x-coordinate of the control point on a quadratic curve" />
      <item value="Permit" />
      <item value="The internal state associated with this pseudorandom number generator. (The specs for the methods in this class describe the ongoing computation of this value.)" />
      <item value="Finds out if there is any intersection between two rotated rectangles." />
      <item value="inds out if there is any intersection between two rotated rectangles." />
      <item value="Returns the correctly rounded positive square root of a {@code double} value." />
      <item value="Ellipse" />
      <item value="Accumulator threshold parameter. Only those lines are returned that get enough" />
      <item value="Angle resolution of the accumulator in radians." />
      <item value="RETR CCOMP" />
      <item value="The function computes a curve length or a closed contour perimeter." />
      <item value="cosfi" />
      <item value="Sets the left position of this view relative to its parent. This method is meant to be called by the layout system and should not generally be called otherwise, because the property may be changed at any time by the layout." />
      <item value="Determine if the supplied view is under the given point in the parent view's coordinate system. @param view Child view of the parent to hit test @param x X position to test in the parent's coordinate system @param y Y position to test in the parent's coordinate system @return true if the supplied view is under the given point, false otherwise" />
      <item value="ID of the pointer that is dragging the captured child view" />
      <item value="Capture a specific child view for dragging within the parent. The callback will be notified but {@link CallbacktryCaptureView(android.view.View, int)} will not be asked permission to capture this view. @param childView Child view to capture @param activePointerId ID of the pointer that is dragging the captured child view" />
      <item value="@return The minimum distance in pixels that the user must travel to initiate a drag" />
      <item value="Called to determine the Z-order of child views. @param index the ordered position to query for @return index of the view that should be ordered at position &lt;code&gt;index&lt;code&gt;" />
      <item value="Enable edge tracking for the selected edges of the parent view. The callback's {@link CallbackonEdgeTouched(int, int)} and {@link CallbackonEdgeDragStarted(int, int)} methods will only be invoked for edges for which edge tracking has been enabled." />
      <item value="A combination of edge flags describing the edge(s) locked" />
      <item value="Called when the given edge may become locked. This can happen if an edge drag was preliminarily rejected before beginning, but after {@link onEdgeTouched(int, int)} was called. This method should return true to lock this edge or false to leave it unlocked. The default behavior is to leave edges unlocked." />
      <item value="STATE IDLE" />
      <item value="STATE SETTLING" />
      <item value="The motion event that occurred during the context click." />
      <item value="Implement this method to handle generic motion events." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="151" />
        <entry key="ENGLISH" value="153" />
        <entry key="POLISH" value="1" />
        <entry key="MALTESE" value="1" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="JAPANESE" value="1" />
        <entry key="HINDI" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1671454477328" />
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20190520000299422" />
      </app-key>
    </option>
    <option name="googleTranslateSettings">
      <google-translate>
        <option name="primaryLanguage" value="ESPERANTO" />
      </google-translate>
    </option>
    <option name="translator" value="BAIDU" />
  </component>
  <component name="Translation.Cache">
    <option name="lastTrimTime" value="1726749852792" />
  </component>
  <component name="Translation.States">
    <option name="translationDialogHeight" value="260" />
    <option name="translationDialogLocationX" value="2172" />
    <option name="translationDialogLocationY" value="415" />
    <histories>
      <item value="Instrument the classes of the current project only. Libraries that this project depends on will not be instrumented." />
      <item value="Annotation isn't stored in binary output" />
      <item value="Annotation is stored in binary output, but invisible for reflection" />
      <item value="The request for this plugin could not be satisfied because the plugin is already on the classpath with an unknown version, so compatibility cannot be checked." />
      <item value="A helper class to execute tasks sequentially in coroutines. Calling [afterPrevious] will always ensure that all previously requested work completes prior to calling the block passed. Any future calls to [afterPrevious] while the current block is running will wait for the current block to complete before starting." />
      <item value="Initialized state for a LifecycleOwner. For an [android.app.Activity], this is the state when it is constructed but has not received [onCreate][android.app.Activity.onCreate] yet." />
      <item value="Schedule [effect] to run when the current composition completes successfully and applies changes. [SideEffect] can be used to apply side effects to objects managed by the composition that are not backed by [snapshots][androidx.compose.runtime.snapshots.Snapshot] so as not to leave those objects in an inconsistent state if the current composition operation fails. [effect] will always be run on the composition's apply dispatcher and appliers are never run concurrent with themselves, one another, applying changes to the composition tree, or running [RememberObserver] event callbacks. [SideEffect]s are always run after [RememberObserver] event callbacks. A [SideEffect] runs after every recomposition. To launch an ongoing task spanning potentially many recompositions, see [LaunchedEffect]. To manage an event subscription or other object lifecycle, see [DisposableEffect]." />
      <item value="CONFLATED" />
      <item value="RENDEZVOUS" />
      <item value="UNLIMITED" />
      <item value="dealing" />
      <item value="treasure box" />
      <item value="Creates a [TweenSpec] configured with the given duration, delay and easing curve. @param durationMillis duration of the animation spec @param delayMillis the amount of time in milliseconds that animation waits before starting @param easing the easing curve that will be used to interpolate between start and end" />
      <item value="remember infinite transition" />
      <item value="observe" />
      <item value="observer" />
      <item value="Performs subcomposition of the provided [content] with given [slotId]. @param slotId unique id which represents the slot we are composing into. If you have fixed amount or slots you can use enums as slot ids, or if you have a list of items maybe an index in the list or some other unique key can work. To be able to correctly match the content between remeasures you should provide the object which is equals to the one you used during the previous measuring. @param content the composable content which defines the slot. It could emit multiple layouts, in this case the returned list of [Measurable]s will have multiple elements. Note: When a [SubcomposeLayout] is in a [LookaheadScope], the subcomposition only happens during the lookahead pass. In the post-lookaheadmain pass, [subcompose] will return the list of [Measurable]s that were subcomposed during the lookahead pass. If the structure of the subtree emitted from [content] is dependent on incoming constraints, consider using constraints received from the lookahead pass for both passes." />
      <item value="Returns a [Map] containing key-value pairs provided by [transform] function applied to elements of the given collection. If any of two pairs would have the same key the last one gets added to the map. The returned map preserves the entry iteration order of the original collection. @sample samples.collections.Collections.Transformations.associate" />
      <item value="Dependent" />
      <item value="Pendant" />
      <item value="size to intrinsics" />
      <item value="@param annotatedString the text to be rendered. @param selection the selection range. If the selection is collapsed, it represents cursor location. When selection range is out of bounds, it is constrained with the text length. @param composition the composition range, null means empty composition or apply if a composition exists on the text. Owned by IME, and if you have an instance of [TextFieldValue] please use [copy] functions if you do not want to intentionally change the value of this field." />
      <item value="Admin" />
      <item value="Adminer" />
      <item value="collapse" />
      <item value="確認する" />
      <item value="フォロワー" />
      <item value="フォロー" />
      <item value="アカウント残高が%1d秒しか通話をサポートできませんので、通話時間を確保するために時間内にチャージしてください(1分ごとに%2dコインを消費します）！" />
      <item value="分かりました" />
      <item value="async" />
      <item value="immediately show" />
      <item value="GLOBAL ACTION DISMISS NOTIFICATION SHADE" />
      <item value="Returns a [StateFlow] that will emit the currently active value associated with the given key. ``` val flow = savedStateHandle.getStateFlow(KEY, &quot;defaultValue&quot;) ``` Since this is a [StateFlow] there will always be a value available which, is why an initial value must be provided. The value of this flow is changed by making a call to [set], passing in the key that references this flow. If there is already a value associated with the given key, the initial value will be ignored. Note: If [T] is an [Array] of [Parcelable] classes, note that you should always use `Array&lt;Parcelable&gt;` and create a typed array from the result as going through process death and recreation (or using the `Don't keep activities` developer option) will result in the type information being lost, thus resulting in a `ClassCastException` if you directly try to collect the result as an `Array&lt;CustomParcelable&gt;`. ``` val typedArrayFlow = savedStateHandle.getStateFlow&lt;Array&lt;Parcelable&gt;&gt;( &quot;KEY&quot; ).map { array -&gt; Convert the Array&lt;Parcelable&gt; to an Array&lt;CustomParcelable&gt; array.map { it as CustomParcelable }.toTypedArray() } ```" />
      <item value="revoker" />
      <item value="is mutual deleted" />
      <item value="Reactions" />
      <item value="EVENT CODE OVERTIME" />
      <item value="reaction" />
      <item value="the container color when content is scrolled behind it" />
      <item value="family square screen" />
      <item value="Scale horizontal and vertically non-uniformly to fill the destination bounds." />
      <item value="show msg reaction" />
      <item value="Repeatable" />
      <item value="This type is not supported when configuration caching is enabled." />
      <item value="evaluated" />
      <item value="Adds a listener to this build, to receive notifications as projects are evaluated." />
      <item value="Whether this navigation action should restore any state previously saved by [Builder.setPopUpTo] or the `popUpToSaveState` attribute." />
      <item value="Whether this navigation action should launch as single-top (i.e., there will be at most one copy of a given destination on the top of the back stack). This functions similarly to how [android.content.Intent.FLAG_ACTIVITY_SINGLE_TOP] works with activities." />
      <item value="NavDeepLink encapsulates the parsing and matching of a navigation deep link. This should be added to a [NavDestination] using [NavDestination.addDeepLink]." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="BENGALI" value="1" />
        <entry key="CHINESE" value="270" />
        <entry key="ENGLISH" value="271" />
        <entry key="FRENCH" value="1" />
        <entry key="ITALIAN" value="2" />
        <entry key="JAPANESE" value="5" />
        <entry key="LATIN" value="1" />
        <entry key="SCOTS_GAELIC" value="1" />
      </map>
    </option>
  </component>
</application>