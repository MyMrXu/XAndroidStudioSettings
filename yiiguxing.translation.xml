<application>
  <component name="AppStorage">
    <option name="pinNewTranslationDialog" value="true" />
    <histories>
      <item value="Daemon" />
      <item value="SONIFICATION" />
      <item value="CONTENT TYPE SONIFICATION" />
      <item value="SPEECH" />
      <item value="CONTENT TYPE SPEECH" />
      <item value="draw Rect.left" />
      <item value="get Audio Source" />
      <item value="Minor" />
      <item value="Major" />
      <item value="get Touch Major" />
      <item value="AXIS PRESSURE" />
      <item value="get Pressure" />
      <item value="for the first pointer index (may be an arbitrary pointer identifier)." />
      <item value="EMULATION" />
      <item value="Cornor" />
      <item value="end Update With Cornor" />
      <item value="threshold" />
      <item value="Gaussian Blur" />
      <item value="cvt Color" />
      <item value="hierarchy" />
      <item value="REVERSE DIFFERENCE" />
      <item value="XOR" />
      <item value="UNION" />
      <item value="INTERSECT" />
      <item value="DIFFERENCE" />
      <item value="The x-coordinate of the control point on a quadratic curve" />
      <item value="Permit" />
      <item value="The internal state associated with this pseudorandom number generator. (The specs for the methods in this class describe the ongoing computation of this value.)" />
      <item value="Finds out if there is any intersection between two rotated rectangles." />
      <item value="inds out if there is any intersection between two rotated rectangles." />
      <item value="Returns the correctly rounded positive square root of a {@code double} value." />
      <item value="Ellipse" />
      <item value="Accumulator threshold parameter. Only those lines are returned that get enough" />
      <item value="Angle resolution of the accumulator in radians." />
      <item value="RETR CCOMP" />
      <item value="The function computes a curve length or a closed contour perimeter." />
      <item value="cosfi" />
      <item value="Sets the left position of this view relative to its parent. This method is meant to be called by the layout system and should not generally be called otherwise, because the property may be changed at any time by the layout." />
      <item value="Determine if the supplied view is under the given point in the parent view's coordinate system. @param view Child view of the parent to hit test @param x X position to test in the parent's coordinate system @param y Y position to test in the parent's coordinate system @return true if the supplied view is under the given point, false otherwise" />
      <item value="ID of the pointer that is dragging the captured child view" />
      <item value="Capture a specific child view for dragging within the parent. The callback will be notified but {@link CallbacktryCaptureView(android.view.View, int)} will not be asked permission to capture this view. @param childView Child view to capture @param activePointerId ID of the pointer that is dragging the captured child view" />
      <item value="@return The minimum distance in pixels that the user must travel to initiate a drag" />
      <item value="Called to determine the Z-order of child views. @param index the ordered position to query for @return index of the view that should be ordered at position &lt;code&gt;index&lt;code&gt;" />
      <item value="Enable edge tracking for the selected edges of the parent view. The callback's {@link CallbackonEdgeTouched(int, int)} and {@link CallbackonEdgeDragStarted(int, int)} methods will only be invoked for edges for which edge tracking has been enabled." />
      <item value="A combination of edge flags describing the edge(s) locked" />
      <item value="Called when the given edge may become locked. This can happen if an edge drag was preliminarily rejected before beginning, but after {@link onEdgeTouched(int, int)} was called. This method should return true to lock this edge or false to leave it unlocked. The default behavior is to leave edges unlocked." />
      <item value="STATE IDLE" />
      <item value="STATE SETTLING" />
      <item value="The motion event that occurred during the context click." />
      <item value="Implement this method to handle generic motion events." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="151" />
        <entry key="ENGLISH" value="153" />
        <entry key="POLISH" value="1" />
        <entry key="MALTESE" value="1" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="JAPANESE" value="1" />
        <entry key="HINDI" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1671454477328" />
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20190520000299422" />
      </app-key>
    </option>
    <option name="googleTranslateSettings">
      <google-translate>
        <option name="primaryLanguage" value="ESPERANTO" />
      </google-translate>
    </option>
    <option name="translator" value="BAIDU" />
  </component>
  <component name="Translation.Cache">
    <option name="lastTrimTime" value="1719802143978" />
  </component>
  <component name="Translation.States">
    <histories>
      <item value="Expansion" />
      <item value="set expansion" />
      <item value="message expansion change listener" />
      <item value="set message expansion listener" />
      <item value="opposite sex flow" />
      <item value="Segment" />
      <item value="on segment success" />
      <item value="sonLiteral is deprecated for public use and no longer available. Please use JsonPrimitive instead" />
      <item value="Creates a [JsonPrimitive] from the given number." />
      <item value="Creating a literal unquoted value of `null` (as in, `value == &quot;null&quot;`) is forbidden. If you want to create JSON null literal, use [JsonNull] object, otherwise, use [JsonPrimitive]." />
      <item value="Sets the host's ViewModelStore used by the NavController to store ViewModels at the navigation graph level. This is required to call [getViewModelStoreOwner] and should generally be called for you by your [NavHost]." />
      <item value="Accusate" />
      <item value="report" />
      <item value="report accusate" />
      <item value="Spirit" />
      <item value="overseas" />
      <item value="inclusive" />
      <item value="group request decline" />
      <item value="set up" />
      <item value="define custom spans for the items. Default is 1x1. It is good practice to leave it `null` when this matches the intended behavior, as providing a custom implementation impacts performance" />
      <item value="apply group disband" />
      <item value="apply group description" />
      <item value="switch join audit" />
      <item value="解散群聊" />
      <item value="reduce" />
      <item value="展開" />
      <item value="Pops all destinations off the backstack up to the destination that meets the condition of the [predicate] and replaces them with [newDestinations]." />
      <item value="Creates and sets a new backstack filled with [entries]. You should use existing entries from [backstack] to preserve their identities and associated components (lifecycles, saved states, view models). New entries can be created with [navEntry] method. Any new rearrangement, duplication and removal of existing entries is a valid change. Use this method when none of the built-in extension methods ([navigate], [pop], [replaceLast] and their variations) suits your need. This function does not guarantee thread-safety and is intended to be called only from the main thread. @param action an optional parameter, used as a hint for [AnimatedNavHost] to select a transition animation. In all other cases it doesn't affect anything. Existing types of actions may be used: [NavAction.Navigate], [NavAction.Replace] or [NavAction.Pop]. You may also extend [NavAction] interface to create new actions appropriate for your use case." />
      <item value="The list of current entries in the backstack. The last item in this list is the item that will be displayed by [NavHost]. May become empty if you pop all the items off the backstack." />
      <item value="is wider screen" />
      <item value="are unlikely to change for the components in the content of a the [CompositionLocalProvider] and should consider using a [staticCompositionLocalOf]." />
      <item value="similar" />
      <item value="cause the entirety of the content to be recomposed instead of just the places where in the composition the local value is used." />
      <item value="tracked" />
      <item value="are not tracked by the composer and changing the value" />
      <item value="Create a [CompositionLocal] key that can be provided using [CompositionLocalProvider]. Unlike [compositionLocalOf], reads of a [staticCompositionLocalOf] are not tracked by the composer and changing the value provided in the [CompositionLocalProvider] call will cause the entirety of the content to be recomposed instead of just the places where in the composition the local value is used. This lack of tracking, however, makes a [staticCompositionLocalOf] more efficient when the value provided is highly unlikely to or will never change. For example, the android context, font loaders, or similar shared values, are unlikely to change for the components in the content of a the [CompositionLocalProvider] and should consider using a [staticCompositionLocalOf]. A color, or other theme like value, might change or even be animated therefore a [compositionLocalOf] should be used. [staticCompositionLocalOf] creates a [ProvidableCompositionLocal] which can be used in a a call to [CompositionLocalProvider]. Similar to [MutableList] vs. [List], if the key is made public as [CompositionLocal] instead of [ProvidableCompositionLocal], it can be read using [CompositionLocal.current] but not re-provided. @param defaultFactory a value factory to supply a value when a value is not provided. This factory is called when no value is provided through a [CompositionLocalProvider] of the caller of the component using [CompositionLocal.current]. If no reasonable default can be provided then consider throwing an exception." />
      <item value="Schedule [effect] to run when the current composition completes successfully and applies changes. [SideEffect] can be used to apply side effects to objects managed by the composition that are not backed by [snapshots][androidx.compose.runtime.snapshots.Snapshot] so as not to leave those objects in an inconsistent state if the current composition operation fails. [effect] will always be run on the composition's apply dispatcher and appliers are never run concurrent with themselves, one another, applying changes to the composition tree, or running [RememberObserver] event callbacks. [SideEffect]s are always run after [RememberObserver] event callbacks. A [SideEffect] runs after every recomposition. To launch an ongoing task spanning potentially many recompositions, see [LaunchedEffect]. To manage an event subscription or other object lifecycle, see [DisposableEffect]." />
      <item value="[Immutable] can be used to mark class as producing immutable instances. The immutability of the class is not validated and is a promise by the type that all publicly accessible properties and fields will not change after the instance is constructed. This is a stronger promise than `val` as it promises that the value will never change not only that values cannot be changed through a setter. [Immutable] is used by composition which enables composition optimizations that can be performed based on the assumption that values read from the type will not change. See [StableMarker] for additional details. `data` classes that only contain `val` properties that do not have custom getters can safely be marked as [Immutable] if the types of properties are either primitive types or also [Immutable]: @sample androidx.compose.runtime.samples.simpleImmutableClass Marking `Person` immutable allows calls the `PersonView` [Composable] function to be skipped if it is the same `person` as it was during the last composition. @see StableMarker" />
      <item value="To set it up with the default style, call this method in your Activity's onCreate method:" />
      <item value="registration failed" />
      <item value="is invalid" />
      <item value="is traditional chinese" />
      <item value="reword" />
      <item value="incognito" />
      <item value="tween" />
      <item value="Extra for Intent.ACTION_BATTERY_CHANGED: integer containing the current battery temperature." />
      <item value="This indicates that the buffer contains non-media data for the muxer to process. All muxer data should start with a FOURCC header that determines the type of data. For example, when it contains Exif data sent to a MediaMuxer track of MediaFormat.MIMETYPE_IMAGE_ANDROID_HEIC type, the data must start with Exif header (&quot;Exif\0\0&quot;), followed by the TIFF header (See JEITA CP-3451C Section 4.5.2.)" />
      <item value="Control whether a fragment instance is retained across Activity re-creation (such as from a configuration change). If set, the fragment lifecycle will be slightly different when an activity is recreated:" />
      <item value="Query if the codec is hardware accelerated. This attribute is provided by the device manufacturer. Note that it cannot be tested for correctness." />
      <item value="REGULAR CODECS" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="177" />
        <entry key="ENGLISH" value="178" />
        <entry key="ITALIAN" value="2" />
        <entry key="LATIN" value="1" />
      </map>
    </option>
  </component>
</application>