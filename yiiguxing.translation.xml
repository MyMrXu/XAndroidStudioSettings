<application>
  <component name="AppStorage">
    <option name="pinNewTranslationDialog" value="true" />
    <histories>
      <item value="The stroke projects out as a square, with the center at the end of the path." />
      <item value="The stroke projects out as a semicircle, with the center at the end of the path." />
      <item value="Specifies how closed shapes (e.g. rects, ovals) are oriented when they are added to a path." />
      <item value="increased" />
      <item value="Set line spacing parameters. Each line will have its line spacing multiplied by {@code spacingMult} and then increased by {@code spacingAdd}." />
      <item value="and 1.0 for {@code spacingMult}." />
      <item value="the amount of line spacing addition" />
      <item value="the line spacing multiplier" />
      <item value="after voice fully startup" />
      <item value="set Average Bitrate" />
      <item value="&lt;p&gt;Some virtual machines may, under some circumstances, omit one or more stack frames from the stack trace. In the extreme case, a virtual machine that has no stack trace information concerning this throwable is permitted to return a zero-length array from this method. Generally speaking, the array returned by this method will contain one element for every frame that would be printed by {@code printStackTrace}. Writes to the returned array do not affect future calls to this method." />
      <item value="Provides programmatic access to the stack trace information printed by {@link printStackTrace()}. Returns an array of stack trace elements, each representing one stack frame. The zeroth element of the array (assuming the array's length is non-zero) represents the top of the stack, which is the last method invocation in the sequence. Typically, this is the point at which this throwable was created and thrown. The last element of the array (assuming the array's length is non-zero) represents the bottom of the stack, which is the first method invocation in the sequence." />
      <item value="Android-changed: Use Android-specific nativeFillInStackTrace" />
      <item value="Initialize stack trace field with information from backtrace if this is the first call to this method Android-changed: Use libcore.util.EmptyArray for the empty stack trace" />
      <item value="Indicates that only the current fragment will be in the {@link Lifecycle.StateRESUMED} state. All other Fragments are capped at {@link Lifecycle.StateSTARTED}." />
      <item value="true if the associated thread should run as a daemon." />
      <item value="concrete" />
      <item value="Indicates data was retrieved unmodified from the on device cache." />
      <item value="Indicates data was probably retrieved locally from the device, although it may have been obtained through a content provider that may have obtained the data from a remote source." />
      <item value="Indicates data was retrieved from a remote source other than the device" />
      <item value="ACCUMULATING" />
      <item value="intern" />
      <item value="init Elements From Collection" />
      <item value="Returns milliseconds since boot, including time spent in sleep. @return elapsed milliseconds since boot." />
      <item value="traffic Out" />
      <item value="Extra for {@link android.content.IntentACTION_BATTERY_CHANGED}: integer containing the current battery temperature." />
      <item value="active Participants" />
      <item value="Feature" />
      <item value="Semaphore" />
      <item value="Skip StringCoding optimization that needs access to java chars." />
      <item value="ND Android-changed: Skip StringCoding optimization that needs access to java chars." />
      <item value="If the [index] is out of bounds of this string, throws an [IndexOutOfBoundsException] except in KotlinJS where the behavior is unspecified." />
      <item value="Flips this buffer. The limit is set to the current position and then the position is set to zero. If the mark is defined then it is discarded." />
      <item value="&lt;p&gt; If the file does not reside on a local device then no such guarantee is made." />
      <item value="&lt;p&gt; If this channel's file resides on a local storage device then when this method returns it is guaranteed that all changes made to the file since this channel was created, or since this method was last invoked, will have been written to that device. This is useful for ensuring that critical information is not lost in the event of a system crash." />
      <item value="Forces any updates to this channel's file to be written to the storage device that contains it." />
      <item value="&lt;p&gt; The initial {@link java.nio.channels.FileChannelposition() position} of the returned channel will be equal to the number of bytes written to the file so far unless this stream is in append mode, in which case it will be equal to the size of the file. Writing bytes to this stream will increment the channel's position accordingly. Changing the channel's position, either explicitly or by writing, will change this stream's file position." />
      <item value="the file channel associated with this file output stream" />
      <item value="Returns the unique {@link java.nio.channels.FileChannel FileChannel} object associated with this file output stream." />
      <item value="try Acquire" />
      <item value="Clear any lines and curves from the path, making it empty. This does NOT change the fill-type setting." />
      <item value="re Path" />
      <item value="abnormal" />
      <item value="Attempts to match the entire region against the pattern." />
      <item value="Return the total number of instructions executed globally (i.e. in all threads)." />
      <item value="drawing cache created in Viewdraw when drawing to a SW canvas." />
      <item value="NOTE: even if previous layer type is HW, we do this to ensure we've cleaned up" />
      <item value="Destroy any previous software drawing cache if present" />
      <item value="For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a {@link Canvas} from either a {@link Bitmap} or {@link android.graphics.Picture} and call {@link draw(Canvas)} on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as {@link android.graphics.Bitmap.ConfigHARDWARE Config.HARDWARE} bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the {@link PixelCopy} API is recommended." />
      <item value="The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, {@link setLayerType(int, Paint)} handles this with hardware rendering." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="151" />
        <entry key="ENGLISH" value="153" />
        <entry key="POLISH" value="1" />
        <entry key="MALTESE" value="1" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="JAPANESE" value="1" />
        <entry key="HINDI" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1649920062119" />
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20190520000299422" />
      </app-key>
    </option>
    <option name="googleTranslateSettings">
      <google-translate>
        <option name="primaryLanguage" value="ESPERANTO" />
      </google-translate>
    </option>
    <option name="translator" value="BAIDU" />
  </component>
</application>